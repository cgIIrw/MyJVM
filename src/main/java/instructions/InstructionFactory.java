package instructions;

import instructions.base.Instruction;
import instructions.comparisons.*;
import instructions.constants.*;
import instructions.constants.Ldc.LDC;
import instructions.constants.Ldc.LDC2_W;
import instructions.constants.Ldc.LDC_W;
import instructions.control.goto_ins.GOTO;
import instructions.control.return_ins.*;
import instructions.extended.*;
import instructions.loads.aload.*;
import instructions.loads.dload.*;
import instructions.loads.fload.*;
import instructions.loads.iload.*;
import instructions.loads.lload.*;
import instructions.math.add.*;
import instructions.math.and.*;
import instructions.math.div.*;
import instructions.math.iinc.*;
import instructions.math.mul.*;
import instructions.math.neg.*;
import instructions.math.or.*;
import instructions.math.rem.*;
import instructions.math.sh.*;
import instructions.math.sub.*;
import instructions.math.xor.*;
import instructions.stack.dup.*;
import instructions.stack.pop.*;
import instructions.stack.swap.*;
import instructions.stores.astore.*;
import instructions.stores.dstore.*;
import instructions.stores.fstore.*;
import instructions.stores.istore.*;
import instructions.stores.lstore.*;
import instructions.references.*;

import java.util.HashMap;

public class InstructionFactory {
    private static HashMap<Integer, Instruction> map = new HashMap<>();

    static {
        map.put(0x00, new NOP());
        map.put(0x01, new ACONST_NULL());
        map.put(0x02, new ICONST_M1());
        map.put(0x03, new ICONST_0());
        map.put(0x04, new ICONST_1());
        map.put(0x05, new ICONST_2());
        map.put(0x06, new ICONST_3());
        map.put(0x07, new ICONST_4());
        map.put(0x08, new ICONST_5());
        map.put(0x09, new LCONST_0());
        map.put(0x0a, new LCONST_1());
        map.put(0x0b, new FCONST_0());
        map.put(0x0c, new FCONST_1());
        map.put(0x0d, new FCONST_2());
        map.put(0x0e, new DCONST_0());
        map.put(0x0f, new DCONST_1());
        map.put(0x10, new BIPUSH());
        map.put(0x11, new SIPUSH());
        map.put(0x12, new LDC());
        map.put(0x13, new LDC_W());
        map.put(0x14, new LDC2_W());
        map.put(0x15, new ILOAD());
        map.put(0x16, new LLOAD());
        map.put(0x17, new FLOAD());
        map.put(0x18, new DLOAD());
        map.put(0x19, new ALOAD());
        map.put(0x1a, new ILOAD_0());
        map.put(0x1b, new ILOAD_1());
        map.put(0x1c, new ILOAD_2());
        map.put(0x1d, new ILOAD_3());
        map.put(0x1e, new LLOAD_0());
        map.put(0x1f, new LLOAD_1());
        map.put(0x20, new LLOAD_2());
        map.put(0x21, new LLOAD_3());
        map.put(0x22, new FLOAD_0());
        map.put(0x23, new FLOAD_1());
        map.put(0x24, new FLOAD_2());
        map.put(0x25, new FLOAD_3());
        map.put(0x26, new DLOAD_0());
        map.put(0x27, new DLOAD_1());
        map.put(0x28, new DLOAD_2());
        map.put(0x29, new DLOAD_3());
        map.put(0x2a, new ALOAD_0());
        map.put(0x2b, new ALOAD_1());
        map.put(0x2c, new ALOAD_2());
        map.put(0x2d, new ALOAD_3());
        map.put(0x36, new ISTORE());
        map.put(0x37, new LSTORE());
        map.put(0x38, new FSTORE());
        map.put(0x39, new DSTORE());
        map.put(0x3a, new ASTORE());
        map.put(0x3b, new ISTORE_0());
        map.put(0x3c, new ISTORE_1());
        map.put(0x3d, new ISTORE_2());
        map.put(0x3e, new ISTORE_3());
        map.put(0x3f, new LSTORE_0());
        map.put(0x40, new LSTORE_1());
        map.put(0x41, new LSTORE_2());
        map.put(0x42, new LSTORE_3());
        map.put(0x43, new FSTORE_0());
        map.put(0x44, new FSTORE_1());
        map.put(0x45, new FSTORE_2());
        map.put(0x46, new FSTORE_3());
        map.put(0x47, new DSTORE_0());
        map.put(0x48, new DSTORE_1());
        map.put(0x49, new DSTORE_2());
        map.put(0x4a, new DSTORE_3());
        map.put(0x4b, new ASTORE_0());
        map.put(0x4c, new ASTORE_1());
        map.put(0x4d, new ASTORE_2());
        map.put(0x4e, new ASTORE_3());
        map.put(0x57, new POP());
        map.put(0x58, new POP2());
        map.put(0x59, new DUP());
        map.put(0x5a, new DUP_X1());
        map.put(0x5b, new DUP_X2());
        map.put(0x5c, new DUP2());
        map.put(0x5d, new DUP2_X1());
        map.put(0x5e, new DUP2_X2());
        map.put(0x5f, new SWAP());
        map.put(0x60, new IADD());
        map.put(0x61, new LADD());
        map.put(0x62, new FADD());
        map.put(0x63, new DADD());
        map.put(0x64, new ISUB());
        map.put(0x65, new LSUB());
        map.put(0x66, new FSUB());
        map.put(0x67, new DSUB());
        map.put(0x68, new IMUL());
        map.put(0x69, new LMUL());
        map.put(0x6a, new FMUL());
        map.put(0x6b, new DMUL());
        map.put(0x6c, new IDIV());
        map.put(0x6d, new LDIV());
        map.put(0x6e, new FDIV());
        map.put(0x6f, new DDIV());
        map.put(0x70, new IREM());
        map.put(0x71, new LREM());
        map.put(0x72, new FREM());
        map.put(0x73, new DREM());
        map.put(0x74, new INEG());
        map.put(0x75, new LNEG());
        map.put(0x76, new FNEG());
        map.put(0x77, new DNEG());
        map.put(0x78, new ISHL());
        map.put(0x79, new LSHL());
        map.put(0x7a, new ISHR());
        map.put(0x7b, new LSHR());
        map.put(0x7c, new IUSHR());
        map.put(0x7d, new LUSHR());
        map.put(0x7e, new IAND());
        map.put(0x7f, new LAND());
        map.put(0x80, new IOR());
        map.put(0x81, new LOR());
        map.put(0x82, new IXOR());
        map.put(0x83, new LXOR());
        map.put(0x84, new IINC());
        map.put(0xb2, new GET_STATIC());
        map.put(0xb3, new PUT_STATIC());
        map.put(0xb4, new GET_FIELD());
        map.put(0xb5, new PUT_FIELD());
        map.put(0xbb, new NEW());
        map.put(0xc0, new CHECK_CAST());
        map.put(0xc1, new INSTANCE_OF());
        map.put(0xb6, new INVOKE_VIRTUAL());
        map.put(0xb7, new INVOKE_SPECIAL());
        map.put(0xb8, new INVOKE_STATIC());
        map.put(0xac, new IRETURN());
        map.put(0xad, new LRETURN());
        map.put(0xae, new FRETURN());
        map.put(0xaf, new DRETURN());
        map.put(0xb0, new ARETURN());
        map.put(0xb1, new RETURN());
        map.put(0xa5, new IF_ACMPEQ());
        map.put(0xa6, new IF_ACMPNE());
        map.put(0x9f, new IF_ICMPEQ());
        map.put(0xa0, new IF_ICMPNE());
        map.put(0xa1, new IF_ICMPLT());
        map.put(0xa2, new IF_ICMPGE());
        map.put(0xa3, new IF_ICMPGT());
        map.put(0xa4, new IF_ICMPLE());
        map.put(0xa7, new GOTO());
        map.put(0x99, new IFEQ());
        map.put(0x9a, new IFNE());
        map.put(0x9b, new IFLT());
        map.put(0x9c, new IFGE());
        map.put(0x9d, new IFGT());
        map.put(0x9e, new IFLE());
        map.put(0xc6, new IFNULL());
        map.put(0xc7, new IFNONNULL());
    }

    public static Instruction getInstruction(int opCode) {
        if (map.containsKey(opCode)) {
            return map.get(opCode);
        } else {
            throw new RuntimeException("不支持的字节码：" + Integer.toHexString(opCode));
        }
    }
}
